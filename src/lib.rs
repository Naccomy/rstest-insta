//! `[rstest_insta]` macro.
//!
//! The macro is intended to be a simple workaround to help with using the
//! `insta` crate alongside the `rstest` one. By annotating a test with the `rstest_insta` macro,
//! the generated snapshot gets a consistent naming.
//!
//! # Example
//!
//! ```
//! use rstest::*;
//! use rstest_insta_macros::rstest_insta;
//!
//! #[rstest_insta]
//! #[case(1)]
//! #[case(2)]
//! #[case::my_special_case(-1)]
//! fn my_test(#[case] a: usize) {
//!     insta::assert_snapshot!(a);
//! }
//!
//! // This code will generate snapshots with the following names:
//! // - my_test@0
//! // - my_test@1
//! // - my_test@my_special_case
//! ```

mod codegen;
mod utils;

use proc_macro::TokenStream;
use syn::{ItemFn, parse_macro_input};

/// Applies consistent naming to snapshots generated by tests annotated with the `rstest` macro.
#[proc_macro_attribute]
pub fn rstest_insta(_attr: TokenStream, item: TokenStream) -> TokenStream {
    let input_fn = parse_macro_input!(item as ItemFn);
    let expanded = codegen::expand(input_fn);
    TokenStream::from(expanded)
}

#[cfg(test)]
pub mod test_helpers {
    pub fn pretty(stream: impl quote::ToTokens) -> String {
        let content = stream.into_token_stream().to_string();
        let file = syn::parse_file(&content).expect("parse file");
        prettyplease::unparse(&file)
    }
}
